package com.brest.ericpol.service.model.impl;

import com.brest.ericpol.service.model.Tank;
import com.brest.ericpol.service.model.TankModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Tank service. Represents a row in the &quot;app_Tank&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.brest.ericpol.service.model.TankModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TankImpl}.
 * </p>
 *
 * @author Viktor Kolbik
 * @see TankImpl
 * @see com.brest.ericpol.service.model.Tank
 * @see com.brest.ericpol.service.model.TankModel
 * @generated
 */
public class TankModelImpl extends BaseModelImpl<Tank> implements TankModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tank model instance should use the {@link com.brest.ericpol.service.model.Tank} interface instead.
     */
    public static final String TABLE_NAME = "app_Tank";
    public static final Object[][] TABLE_COLUMNS = {
            { "tankId", Types.BIGINT },
            { "number_", Types.VARCHAR },
            { "modification", Types.VARCHAR },
            { "price", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table app_Tank (tankId LONG not null primary key,number_ VARCHAR(75) null,modification VARCHAR(75) null,price LONG)";
    public static final String TABLE_SQL_DROP = "drop table app_Tank";
    public static final String ORDER_BY_JPQL = " ORDER BY tank.tankId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY app_Tank.tankId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.brest.ericpol.service.model.Tank"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.brest.ericpol.service.model.Tank"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.brest.ericpol.service.model.Tank"),
            true);
    public static long MODIFICATION_COLUMN_BITMASK = 1L;
    public static long NUMBER_COLUMN_BITMASK = 2L;
    public static long PRICE_COLUMN_BITMASK = 4L;
    public static long TANKID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.brest.ericpol.service.model.Tank"));
    private static ClassLoader _classLoader = Tank.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Tank.class };
    private long _tankId;
    private String _number;
    private String _originalNumber;
    private String _modification;
    private String _originalModification;
    private long _price;
    private long _originalPrice;
    private boolean _setOriginalPrice;
    private long _columnBitmask;
    private Tank _escapedModel;

    public TankModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _tankId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTankId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _tankId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Tank.class;
    }

    @Override
    public String getModelClassName() {
        return Tank.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("tankId", getTankId());
        attributes.put("number", getNumber());
        attributes.put("modification", getModification());
        attributes.put("price", getPrice());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long tankId = (Long) attributes.get("tankId");

        if (tankId != null) {
            setTankId(tankId);
        }

        String number = (String) attributes.get("number");

        if (number != null) {
            setNumber(number);
        }

        String modification = (String) attributes.get("modification");

        if (modification != null) {
            setModification(modification);
        }

        Long price = (Long) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }
    }

    @Override
    public long getTankId() {
        return _tankId;
    }

    @Override
    public void setTankId(long tankId) {
        _tankId = tankId;
    }

    @Override
    public String getNumber() {
        if (_number == null) {
            return StringPool.BLANK;
        } else {
            return _number;
        }
    }

    @Override
    public void setNumber(String number) {
        _columnBitmask |= NUMBER_COLUMN_BITMASK;

        if (_originalNumber == null) {
            _originalNumber = _number;
        }

        _number = number;
    }

    public String getOriginalNumber() {
        return GetterUtil.getString(_originalNumber);
    }

    @Override
    public String getModification() {
        if (_modification == null) {
            return StringPool.BLANK;
        } else {
            return _modification;
        }
    }

    @Override
    public void setModification(String modification) {
        _columnBitmask |= MODIFICATION_COLUMN_BITMASK;

        if (_originalModification == null) {
            _originalModification = _modification;
        }

        _modification = modification;
    }

    public String getOriginalModification() {
        return GetterUtil.getString(_originalModification);
    }

    @Override
    public long getPrice() {
        return _price;
    }

    @Override
    public void setPrice(long price) {
        _columnBitmask |= PRICE_COLUMN_BITMASK;

        if (!_setOriginalPrice) {
            _setOriginalPrice = true;

            _originalPrice = _price;
        }

        _price = price;
    }

    public long getOriginalPrice() {
        return _originalPrice;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Tank.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Tank toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Tank) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TankImpl tankImpl = new TankImpl();

        tankImpl.setTankId(getTankId());
        tankImpl.setNumber(getNumber());
        tankImpl.setModification(getModification());
        tankImpl.setPrice(getPrice());

        tankImpl.resetOriginalValues();

        return tankImpl;
    }

    @Override
    public int compareTo(Tank tank) {
        long primaryKey = tank.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Tank)) {
            return false;
        }

        Tank tank = (Tank) obj;

        long primaryKey = tank.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TankModelImpl tankModelImpl = this;

        tankModelImpl._originalNumber = tankModelImpl._number;

        tankModelImpl._originalModification = tankModelImpl._modification;

        tankModelImpl._originalPrice = tankModelImpl._price;

        tankModelImpl._setOriginalPrice = false;

        tankModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Tank> toCacheModel() {
        TankCacheModel tankCacheModel = new TankCacheModel();

        tankCacheModel.tankId = getTankId();

        tankCacheModel.number = getNumber();

        String number = tankCacheModel.number;

        if ((number != null) && (number.length() == 0)) {
            tankCacheModel.number = null;
        }

        tankCacheModel.modification = getModification();

        String modification = tankCacheModel.modification;

        if ((modification != null) && (modification.length() == 0)) {
            tankCacheModel.modification = null;
        }

        tankCacheModel.price = getPrice();

        return tankCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{tankId=");
        sb.append(getTankId());
        sb.append(", number=");
        sb.append(getNumber());
        sb.append(", modification=");
        sb.append(getModification());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.brest.ericpol.service.model.Tank");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>tankId</column-name><column-value><![CDATA[");
        sb.append(getTankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>number</column-name><column-value><![CDATA[");
        sb.append(getNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modification</column-name><column-value><![CDATA[");
        sb.append(getModification());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
