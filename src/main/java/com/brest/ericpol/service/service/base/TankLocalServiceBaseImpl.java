package com.brest.ericpol.service.service.base;

import com.brest.ericpol.service.model.Tank;
import com.brest.ericpol.service.service.TankLocalService;
import com.brest.ericpol.service.service.persistence.EquipmentPersistence;
import com.brest.ericpol.service.service.persistence.TankPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tank local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.brest.ericpol.service.service.impl.TankLocalServiceImpl}.
 * </p>
 *
 * @author Viktor Kolbik
 * @see com.brest.ericpol.service.service.impl.TankLocalServiceImpl
 * @see com.brest.ericpol.service.service.TankLocalServiceUtil
 * @generated
 */
public abstract class TankLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements TankLocalService, IdentifiableBean {
    @BeanReference(type = com.brest.ericpol.service.service.EquipmentLocalService.class)
    protected com.brest.ericpol.service.service.EquipmentLocalService equipmentLocalService;
    @BeanReference(type = EquipmentPersistence.class)
    protected EquipmentPersistence equipmentPersistence;
    @BeanReference(type = com.brest.ericpol.service.service.TankLocalService.class)
    protected com.brest.ericpol.service.service.TankLocalService tankLocalService;
    @BeanReference(type = TankPersistence.class)
    protected TankPersistence tankPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TankLocalServiceClpInvoker _clpInvoker = new TankLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.brest.ericpol.service.service.TankLocalServiceUtil} to access the tank local service.
     */

    /**
     * Adds the tank to the database. Also notifies the appropriate model listeners.
     *
     * @param tank the tank
     * @return the tank that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Tank addTank(Tank tank) throws SystemException {
        tank.setNew(true);

        return tankPersistence.update(tank);
    }

    /**
     * Creates a new tank with the primary key. Does not add the tank to the database.
     *
     * @param tankId the primary key for the new tank
     * @return the new tank
     */
    @Override
    public Tank createTank(long tankId) {
        return tankPersistence.create(tankId);
    }

    /**
     * Deletes the tank with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param tankId the primary key of the tank
     * @return the tank that was removed
     * @throws PortalException if a tank with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Tank deleteTank(long tankId) throws PortalException, SystemException {
        return tankPersistence.remove(tankId);
    }

    /**
     * Deletes the tank from the database. Also notifies the appropriate model listeners.
     *
     * @param tank the tank
     * @return the tank that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Tank deleteTank(Tank tank) throws SystemException {
        return tankPersistence.remove(tank);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Tank.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return tankPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.brest.ericpol.service.model.impl.TankModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return tankPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.brest.ericpol.service.model.impl.TankModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return tankPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return tankPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return tankPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Tank fetchTank(long tankId) throws SystemException {
        return tankPersistence.fetchByPrimaryKey(tankId);
    }

    /**
     * Returns the tank with the primary key.
     *
     * @param tankId the primary key of the tank
     * @return the tank
     * @throws PortalException if a tank with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Tank getTank(long tankId) throws PortalException, SystemException {
        return tankPersistence.findByPrimaryKey(tankId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return tankPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the tanks.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.brest.ericpol.service.model.impl.TankModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of tanks
     * @param end the upper bound of the range of tanks (not inclusive)
     * @return the range of tanks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Tank> getTanks(int start, int end) throws SystemException {
        return tankPersistence.findAll(start, end);
    }

    /**
     * Returns the number of tanks.
     *
     * @return the number of tanks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getTanksCount() throws SystemException {
        return tankPersistence.countAll();
    }

    /**
     * Updates the tank in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param tank the tank
     * @return the tank that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Tank updateTank(Tank tank) throws SystemException {
        return tankPersistence.update(tank);
    }

    /**
     * Returns the equipment local service.
     *
     * @return the equipment local service
     */
    public com.brest.ericpol.service.service.EquipmentLocalService getEquipmentLocalService() {
        return equipmentLocalService;
    }

    /**
     * Sets the equipment local service.
     *
     * @param equipmentLocalService the equipment local service
     */
    public void setEquipmentLocalService(
        com.brest.ericpol.service.service.EquipmentLocalService equipmentLocalService) {
        this.equipmentLocalService = equipmentLocalService;
    }

    /**
     * Returns the equipment persistence.
     *
     * @return the equipment persistence
     */
    public EquipmentPersistence getEquipmentPersistence() {
        return equipmentPersistence;
    }

    /**
     * Sets the equipment persistence.
     *
     * @param equipmentPersistence the equipment persistence
     */
    public void setEquipmentPersistence(
        EquipmentPersistence equipmentPersistence) {
        this.equipmentPersistence = equipmentPersistence;
    }

    /**
     * Returns the tank local service.
     *
     * @return the tank local service
     */
    public com.brest.ericpol.service.service.TankLocalService getTankLocalService() {
        return tankLocalService;
    }

    /**
     * Sets the tank local service.
     *
     * @param tankLocalService the tank local service
     */
    public void setTankLocalService(
        com.brest.ericpol.service.service.TankLocalService tankLocalService) {
        this.tankLocalService = tankLocalService;
    }

    /**
     * Returns the tank persistence.
     *
     * @return the tank persistence
     */
    public TankPersistence getTankPersistence() {
        return tankPersistence;
    }

    /**
     * Sets the tank persistence.
     *
     * @param tankPersistence the tank persistence
     */
    public void setTankPersistence(TankPersistence tankPersistence) {
        this.tankPersistence = tankPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.brest.ericpol.service.model.Tank",
            tankLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.brest.ericpol.service.model.Tank");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Tank.class;
    }

    protected String getModelClassName() {
        return Tank.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = tankPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
